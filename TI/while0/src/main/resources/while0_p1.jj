PARSER_BEGIN(While0)

package fh.aachen.praktikum1;

public class While0 {

  public static void main(String[] args) throws ParseException {
    While0 parser = new While0(System.in);
    parser.Input();
  }

}

PARSER_END(While0)
/*
* Examples:
*
* NAME(in V1,V2; out Y);
* var(H1,H2,HV3,HV4);
* while V1 != V2 do
* while V1 != V2 do V1 = 0 end
* end
*
* NAME(in; out Y); var();  V1 = 0
* NAME(in; out Y); var(); while H1 != H2 do begin V1 = 0 end
* NAME(in; out Y); var(H1,H2,HV3,HV4); while H1 != H2 do begin V1 = 0 end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin V1 = 0 end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin while V1 != V2 do begin V1 = 0 end end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin while V1 != V2 do begin V1 = 0; V2 = V2 +   1 end end
*/

SKIP :
{
    " "
    |
    "\t"
    |
    "\n"
    |
    "\r"
}

TOKEN :
{
    <IN: "in"> {debugStream.println("KEYWORD: " + image);}
    |
    <OUT: "out"> {debugStream.println("KEYWORD: " + image);}
    |
    <WHILE: "while"> {debugStream.println("KEYWORD: " + image);}
    |
    <BEGIN: "begin"> {debugStream.println("KEYWORD: " + image);}
    |
    <DO: "do"> {debugStream.println("KEYWORD: " + image);}
    |
    <END: "end"> {debugStream.println("KEYWORD: " + image);}
    |
    <LOC: "var"> {debugStream.println("Local Variables: ");}
    |
    <NEQ: "!="> {debugStream.println("Not equal");}
    |
    <EQ: "="> {debugStream.println("Equal");}
    |
    <SEMICOLON: ";"> {debugStream.println("Semicolon");}
    |
    <COMMA: ","> {debugStream.println("Comma");}
    |
    <OPENING_BRACKET: "("> {debugStream.println("Opening bracket");}
    |
    <CLOSING_BRACKET: ")"> {debugStream.println("Closing bracket");}
    |
    <VARIABLE: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])*> {debugStream.println("VARIABLE: " + image);}
}

void while0Func() :
{}
{
    header()
    localVars()
    alpha()
    <EOF>
}

void header() :
{}
{
    <VARIABLE> <OPENING_BRACKET> <IN> varList() <SEMICOLON> <OUT> <VARIABLE> <CLOSING_BRACKET> < SEMICOLON>
}

void localVars() :
{}
{
    <LOC> <OPENING_BRACKET> varList() <CLOSING_BRACKET> <SEMICOLON>
}

void varList() :
{}
{
    (<VARIABLE> (<COMMA> <VARIABLE>)*)?
}

void alpha() :
{}
{
     (whileLoop() | valueAssignment()) (<SEMICOLON> alpha())?
}

void whileLoop() :
{}
{
    <WHILE> <VARIABLE> <NEQ> <VARIABLE> <DO> <BEGIN> alpha() <END>
}

void valueAssignment():
{}
{
    <VARIABLE> <EQ> ("0"| <VARIABLE> "+" "1")
}

void Input() :
{}
{
  while0Func()
  { System.out.println("Correct While0-Program"); }
}