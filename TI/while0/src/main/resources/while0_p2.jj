options {
    DEBUG_PARSER = false;
    STATIC = false;
    OUTPUT_DIRECTORY = "../java/fh/aachen/praktikum2";
}

PARSER_BEGIN(While0)

package fh.aachen.praktikum2;

public class While0 {

  public static void main(String[] args) throws ParseException {
    While0 parser = new While0(System.in);
    parser.runParser();
  }

}

PARSER_END(While0)
/*
* Examples:
*
* NAME(in V1,V2; out Y);
* var(H1,H2,HV3,HV4);
* while V1 != V2 do begin
* while V1 != V2 do begin V1 = 0 end
* end
*
* NAME(in; out Y); var();  V1 = 0
* NAME(in; out Y); var(); while H1 != H2 do begin V1 = 0 end
* NAME(in; out Y); var(H1,H2,HV3,HV4); while H1 != H2 do begin V1 = 0 end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin V1 = 0 end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin while V1 != V2 do begin V1 = 0 end end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin while V1 != V2 do begin V1 = 0; V2 = V2 +   1 end end
*/

SKIP :
{
    " "
    |
    "\t"
    |
    "\n"
    |
    "\r"
}

TOKEN :
{
    <IN: "in"> {debugStream.println("KEYWORD: " + image);}
    |
    <OUT: "out"> {debugStream.println("KEYWORD: " + image);}
    |
    <WHILE: "while"> {debugStream.println("KEYWORD: " + image);}
    |
    <BEGIN: "begin"> {debugStream.println("KEYWORD: " + image);}
    |
    <DO: "do"> {debugStream.println("KEYWORD: " + image);}
    |
    <END: "end"> {debugStream.println("KEYWORD: " + image);}
    |
    <NEQ: "!="> {debugStream.println("Not equal");}
    |
    <EQ: "="> {debugStream.println("Equal");}
    |
    <SEMICOLON: ";">
//    |
//    <COMMA: ",">
    |
    <CLOSING_BRACKET: ")">
    |
    <LOC: "var(">
    |
    <NAME: (["0"-"9","A"-"Z","a"-"z"])+"("> {System.out.println("--Program name:" + image);}
    |
    <VARIABLE: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])*> {System.out.println("" + image);}
}

void while0Func() :
{
     URMStorage storage = new URMStorage();
}
{
    header(storage)
    localVars()
    alpha()
    <EOF>
}

void header(URMStorage storage) :
{Token t;}
{
    t = <NAME> {storage.setProgramName(t.image);}
    <IN> varList() <SEMICOLON> <OUT> <VARIABLE> <CLOSING_BRACKET> < SEMICOLON>
    {System.out.println("HEADER eingelesen");}
}

void localVars() :
{}
{
    <LOC> varList() <CLOSING_BRACKET> <SEMICOLON>
    {System.out.println("Locale Variablen eingelesen");}
}

void varList() :
{}
{
    (<VARIABLE> ("," <VARIABLE>)*)?
    {System.out.println("Variablenliste eingelesen");}
}

void alpha() :
{}
{
     (whileLoop() | valueAssignment()) (<SEMICOLON> alpha())?
     {System.out.println("ALPHA eingelesen");}
}

void whileLoop() :
{}
{
    <WHILE> <VARIABLE> <NEQ> <VARIABLE> <DO> <BEGIN> alpha() <END>
    {System.out.println("whileLoop eingelesen");}
}

void valueAssignment():
{}
{
    <VARIABLE> <EQ> ("0"| <VARIABLE> "+" "1")
    {System.out.println("valueAssignment eingelesen");}
}

boolean runParser() :
{}
{
  while0Func()
  {
    System.out.println("Correct While0-Program");
    return true;
  }
}