options {
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
//    DEBUG_LOOKAHEAD = true;
    STATIC = false;
    OUTPUT_DIRECTORY = "../java/fh/aachen/praktikum2";
}

PARSER_BEGIN(While0)

package fh.aachen.praktikum2;

import java.util.Objects;public class While0 {

  public static void main(String[] args) throws ParseException {
    While0 parser = new While0(System.in);
    parser.runParser();
  }

}

PARSER_END(While0)
/*
* Examples:
*
* NAME(in V1,V2; out Y);
* var(H1,H2,HV3,HV4);
* while V1 != V2 do begin
* while V1 != V2 do begin V1 = 0 end
* end
*
* NAME(in; out Y); var();  V1 = 0
* NAME(in; out Y); var(); while H1 != H2 do begin V1 = 0 end
* NAME(in; out Y); var(H1,H2,HV3,HV4); while H1 != H2 do begin V1 = 0 end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin V1 = 0 end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin while V1 != V2 do begin V1 = 0 end end
* NAME(in V1,V2; out Y); var(H1,H2,HV3,HV4); while V1 != V2 do begin while V1 != V2 do begin V1 = 0; V2 = V2 +   1 end end
*/

SKIP :
{
    " "
    |
    "\t"
    |
    "\n"
    |
    "\r"
}

TOKEN :
{
    <IN: "in">
    |
    <OUT: "out">
    |
    <WHILE: "while">
    |
    <BEGIN: "begin">
    |
    <DO: "do">
    |
    <END: "end">
    |
    <NEQ: "!=">
    |
    <EQ: "=">
    |
    <SEMICOLON: ";">
    |
    <COMMA: ",">
    |
    <OPENING_BRACKET: "(">
    |
    <CLOSING_BRACKET: ")">
    |
    <LOC: "var">
    |
    <VARIABLE: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])*>
}

void while0Func() :
{
     URMStorage storage = new URMStorage();
}
{
    header(storage)
    localVars(storage)
    alpha(storage)
    <EOF>
    {System.out.println(storage);}
}

void header(URMStorage storage) :
{Token t;}
{
    t = <VARIABLE> {storage.setProgramName(t.image);} <OPENING_BRACKET> <IN> varList(storage) <SEMICOLON> <OUT> singleVar(storage, true) <CLOSING_BRACKET> < SEMICOLON>
}

void localVars(URMStorage storage) :
{}
{
    <LOC> <OPENING_BRACKET> varList(storage) <CLOSING_BRACKET> <SEMICOLON>
}

void varList(URMStorage storage) :
{Token t;}
{
    (singleVar(storage, false) (<COMMA> singleVar(storage, false))*)?
}

void singleVar(URMStorage storage, boolean outVar) :
{Token t;}
{
    t = <VARIABLE>
    {
        if(outVar){
            storage.setOutputVariable(t.image);
        } else {
            storage.addVariable(t.image);
        }
    }
}

void alpha(URMStorage storage) :
{}
{
     (whileLoop(storage) | valueAssignment(storage)) (<SEMICOLON> alpha(storage))?
}

void whileLoop(URMStorage storage) :
{
    Token from;
    Token to;
}
{
    <WHILE> from = <VARIABLE> <NEQ> to = <VARIABLE>
    {storage.enterWhileLoop(from.image, to.image);}
    <DO> <BEGIN> alpha(storage) <END>
    {storage.leaveWhileLoop();}
}

void valueAssignment(URMStorage storage):
{
    Token first;
    Token second;
}
{
    first = <VARIABLE> <EQ> ("0" {storage.addAssignmentZero(first.image);} | second = <VARIABLE> "+" "1"
    {
    if(second.image != null && !Objects.equals(first.image,second.image)){System.out.println("First: "+ first.image);
        throw new IllegalArgumentException();}
        storage.addAssignmentPlusOne(first.image);
    })
}

boolean runParser() :
{}
{
  while0Func()
  {
    System.out.println("Correct While0-Program");
    return true;
  }
}